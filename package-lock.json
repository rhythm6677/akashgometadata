import React, { useState, useRef, useEffect } from 'react';
import { Download, Plus, Trash2, Upload, Save, Grid, Edit2, Check, X } from 'lucide-react';

const BulkContentManager = () => {
  const [namesList, setNamesList] = useState('');
  const [extension, setExtension] = useState('');
  const [provider, setProvider] = useState('');
  const [contentType, setContentType] = useState('');
  const [keywords, setKeywords] = useState('');
  const [rating, setRating] = useState('');
  const [durationMinutes, setDurationMinutes] = useState('');
  const [yearOfRelease, setYearOfRelease] = useState('');
  const [languages, setLanguages] = useState('');
  const [summaryPrefix, setSummaryPrefix] = useState('');
  const [actor, setActor] = useState('');
  const [director, setDirector] = useState('');
  const [genres, setGenres] = useState('');
  const [audioLanguages, setAudioLanguages] = useState('');
  const [isHd, setIsHd] = useState('');
  const [expiryDate, setExpiryDate] = useState('');
  const [contentData, setContentData] = useState([]);
  const [savedSheets, setSavedSheets] = useState([]);
  const [currentSheetName, setCurrentSheetName] = useState('');
  const [isEditingName, setIsEditingName] = useState(false);
  const [editedSheetName, setEditedSheetName] = useState('');
  const [showSheetMenu, setShowSheetMenu] = useState(false);
  const [viewMode, setViewMode] = useState('form');
  const [editingCell, setEditingCell] = useState({ index: null, field: null, value: '' });
  const tableRef = useRef(null);

  // Load sheets from localStorage
  useEffect(() => {
    const localSheets = JSON.parse(localStorage.getItem('savedSheets') || '[]');
    setSavedSheets(localSheets);
  }, []);

  const normalizeText = (text) =>
    text.normalize('NFD').replace(/[\u0300-\u036f]/g, '').replace(/[^a-zA-Z0-9]/g, '');

  const generateContentId = (name, ext) => normalizeText(name) + ext;

  const minutesToSeconds = (minutes) => {
    const mins = parseFloat(minutes);
    return isNaN(mins) ? '' : Math.round(mins * 60);
  };

  const handleGenerate = () => {
    const names = namesList.split(',').map(n => n.trim()).filter(n => n);
    if (names.length === 0) return alert('Please enter at least one name');
    if (!extension) return alert('Please enter an extension');

    const newData = names.map(name => {
      const contentId = generateContentId(name, extension);
      const summary = name + summaryPrefix;
      return {
        contentId,
        provider,
        contentType,
        keywords,
        rating,
        duration: minutesToSeconds(durationMinutes),
        yearOfRelease,
        landscape: contentId + '_Landscape.jpg',
        portrait: contentId + '_Portrait.jpg',
        languages,
        summary,
        title: summary,
        filename: contentId + '.mp4',
        actor,
        director,
        genres,
        audioLanguages,
        isHd,
        expiryDate: expiryDate ? formatDate(expiryDate) : '',
        originalName: name
      };
    });
    setContentData([...contentData, ...newData]);

    setTimeout(() => {
      const tableElement = document.getElementById('content-table-section');
      if (tableElement) tableElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }, 100);
  };

  const saveCurrentSheet = () => {
    if (contentData.length === 0) return alert('No data to save');
    const sheetName = currentSheetName || `Sheet_${Date.now()}`;
    const sheet = { name: sheetName, data: contentData, timestamp: Date.now() };

    const localSheets = JSON.parse(localStorage.getItem('savedSheets') || '[]');
    const existingIndex = localSheets.findIndex(s => s.name === sheetName);
    if (existingIndex >= 0) localSheets[existingIndex] = sheet;
    else localSheets.push(sheet);

    localStorage.setItem('savedSheets', JSON.stringify(localSheets));
    setSavedSheets(localSheets);
    setCurrentSheetName(sheetName);
    alert('ðŸ’¾ Sheet saved locally!');
  };

  const loadSheet = (sheetName) => {
    const sheet = savedSheets.find(s => s.name === sheetName);
    if (sheet) {
      setContentData(sheet.data);
      setCurrentSheetName(sheetName);
      setShowSheetMenu(false);
      setViewMode('form');
    }
  };

  const deleteSheet = (sheetName, e) => {
    e.stopPropagation();
    if (!window.confirm(`Delete "${sheetName}"?`)) return;

    const localSheets = JSON.parse(localStorage.getItem('savedSheets') || '[]');
    const updated = localSheets.filter(s => s.name !== sheetName);
    localStorage.setItem('savedSheets', JSON.stringify(updated));
    setSavedSheets(updated);

    if (currentSheetName === sheetName) {
      setContentData([]);
      setCurrentSheetName('');
    }
  };

  const createNewSheet = () => {
    setContentData([]);
    setCurrentSheetName('');
    setShowSheetMenu(false);
    setViewMode('form');
  };

  const startEditingSheetName = () => {
    if (!currentSheetName) return alert('Please save the sheet first');
    setEditedSheetName(currentSheetName);
    setIsEditingName(true);
  };

  const saveSheetName = () => {
    if (!editedSheetName.trim()) return alert('Sheet name cannot be empty');
    if (savedSheets.some(s => s.name === editedSheetName && s.name !== currentSheetName))
      return alert('A sheet with this name already exists');

    const localSheets = savedSheets.map(s =>
      s.name === currentSheetName ? { ...s, name: editedSheetName } : s
    );
    localStorage.setItem('savedSheets', JSON.stringify(localSheets));
    setSavedSheets(localSheets);
    setCurrentSheetName(editedSheetName);
    setIsEditingName(false);
  };

  const cancelEditingName = () => {
    setIsEditingName(false);
    setEditedSheetName('');
  };

  const startCellEdit = (index, field, value) => setEditingCell({ index, field, value: value || '' });
  const saveCellEdit = () => {
    if (editingCell.index !== null && editingCell.field) {
      const updated = [...contentData];
      updated[editingCell.index][editingCell.field] = editingCell.value;
      setContentData(updated);
      setEditingCell({ index: null, field: null, value: '' });
    }
  };
  const cancelCellEdit = () => setEditingCell({ index: null, field: null, value: '' });

  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    return day + '-' + month + '-' + date.getFullYear();
  };

  const handleDelete = (index) => setContentData(contentData.filter((_, i) => i !== index));

  const exportToCSV = () => {
    if (contentData.length === 0) return alert('No data to export');
    const headers = Object.keys(contentData[0]);
    const csvRows = [headers.join(',')];
    contentData.forEach(row => {
      const values = headers.map(h => `"${(row[h] || '').toString().replace(/"/g, '""')}"`);
      csvRows.push(values.join(','));
    });
    const blob = new Blob([csvRows.join('\n')], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'content_bulk_' + Date.now() + '.csv';
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const TableCell = ({ index, field, value }) => {
    const isEditing = editingCell.index === index && editingCell.field === field;
    if (isEditing) {
      return (
        <td>
          <input
            type="text"
            value={editingCell.value}
            onChange={(e) => setEditingCell({ ...editingCell, value: e.target.value })}
            onBlur={saveCellEdit}
            onKeyDown={(e) => { if (e.key === 'Enter') saveCellEdit(); else if (e.key === 'Escape') cancelCellEdit(); }}
            autoFocus
          />
        </td>
      );
    }
    return (
      <td onClick={() => startCellEdit(index, field, value)}>{value}</td>
    );
  };

  return (
    <div style={{ padding: 20 }}>
      <h1>Bulk Content Manager</h1>

      <div>
        <textarea
          placeholder="Name 1, Name 2, Name 3..."
          value={namesList}
          onChange={(e) => setNamesList(e.target.value)}
          rows={3}
          style={{ width: '100%' }}
        />
        <input placeholder="Extension" value={extension} onChange={e => setExtension(e.target.value)} />
        <input placeholder="Provider" value={provider} onChange={e => setProvider(e.target.value)} />
        <input placeholder="Content Type" value={contentType} onChange={e => setContentType(e.target.value)} />
        <input placeholder="Keywords" value={keywords} onChange={e => setKeywords(e.target.value)} />
        <input placeholder="Rating" value={rating} onChange={e => setRating(e.target.value)} />
        <input placeholder="Duration (minutes)" value={durationMinutes} onChange={e => setDurationMinutes(e.target.value)} />
        <input placeholder="Year" value={yearOfRelease} onChange={e => setYearOfRelease(e.target.value)} />
        <input placeholder="Languages" value={languages} onChange={e => setLanguages(e.target.value)} />
        <input placeholder="Summary Prefix" value={summaryPrefix} onChange={e => setSummaryPrefix(e.target.value)} />
        <input placeholder="Actor" value={actor} onChange={e => setActor(e.target.value)} />
        <input placeholder="Director" value={director} onChange={e => setDirector(e.target.value)} />
        <input placeholder="Genres" value={genres} onChange={e => setGenres(e.target.value)} />
        <input placeholder="Audio Languages" value={audioLanguages} onChange={e => setAudioLanguages(e.target.value)} />
        <input placeholder="HD?" value={isHd} onChange={e => setIsHd(e.target.value)} />
        <input type="date" placeholder="Expiry Date" value={expiryDate} onChange={e => setExpiryDate(e.target.value)} />
        <br /><br />
        <button onClick={handleGenerate}><Plus /> Generate</button>
        <button onClick={saveCurrentSheet}><Save /> Save Sheet</button>
        <button onClick={exportToCSV}><Download /> Export CSV</button>
      </div>

      <div style={{ marginTop: 20 }}>
        <h2>Saved Sheets</h2>
        <button onClick={() => setShowSheetMenu(!showSheetMenu)}>Toggle Sheet Menu</button>
        {showSheetMenu && (
          <ul>
            {savedSheets.map(sheet => (
              <li key={sheet.name} onClick={() => loadSheet(sheet.name)}>
                {sheet.name}
                <button onClick={(e) => deleteSheet(sheet.name, e)}><Trash2 /></button>
              </li>
            ))}
            <li onClick={createNewSheet}><Plus /> New Sheet</li>
          </ul>
        )}
      </div>

      <div id="content-table-section" style={{ marginTop: 20 }}>
        <h2>Content Data</h2>
        <table border={1} cellPadding={5} cellSpacing={0} ref={tableRef}>
          <thead>
            <tr>
              {contentData[0] && Object.keys(contentData[0]).map(key => <th key={key}>{key}</th>)}
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {contentData.map((row, idx) => (
              <tr key={idx}>
                {Object.entries(row).map(([key, value]) => (
                  <TableCell key={key} index={idx} field={key} value={value} />
                ))}
                <td>
                  <button onClick={() => handleDelete(idx)}><Trash2 /></button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default BulkContentManager;
